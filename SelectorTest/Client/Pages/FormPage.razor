@page "/form"

<p>@($"Number total is {selectedCias.Select(o => o.Name).ToList().Count} and distinct total is {selectedCias.Select(o => o.Name).Distinct().ToList().Count}")</p>

<EditForm Model="@selectedCias" OnValidSubmit="@AddCompany">
	<DataAnnotationsValidator />
	<MultipleSelectorTypeahead Context="company" OnChange="dto => OnChange(dto)" OnRemove="dto => OnRemove(dto)"
							SearchMethod="SearchCompanies" SelectedElements="selectedCias">
		<MyResultTemplate>
			Company: <b>@company.Name</b>
		</MyResultTemplate>
		<MyListTemplate>
			Company: <b>@company.Name</b>
		</MyListTemplate>
	</MultipleSelectorTypeahead>
	<ValidationMessage For="@(() => selectedCias)" />
	<br />
	<button class="btn btn-primary" type="submit">Submit</button>
</EditForm>

@code {

	public class ExchangeCompanyDTO
	{
		public string Name { get; set; }
	}

	[Parameter] public List<ExchangeCompanyDTO> selectedCias { get; set; } = new List<ExchangeCompanyDTO>();
	
	protected async Task AddCompany()
	{
		Console.WriteLine(selectedCias.Count);
		await Task.CompletedTask;
	}

	protected void OnChange(ExchangeCompanyDTO item)
	{
		//Console.WriteLine(item.Name); // in case you need it
											// this is what updates the
		StateHasChanged();
		//Console.WriteLine($"Number total is {selectedCias.Select(o => o.Name).ToList().Count} and distinct total is {selectedCias.Select(o => o.Name).Distinct().ToList().Count}");
		selectedCias = selectedCias.GroupBy(o => o.Name).Select(x => x.FirstOrDefault()).ToList();
		
	}

	protected void OnRemove(ExchangeCompanyDTO item)
	{
		Console.WriteLine(item.Name); // in case you need it
		StateHasChanged();// this is what updates the UI
	}

	private async Task<IEnumerable<ExchangeCompanyDTO>> SearchCompanies(string searchText)
    {
		await Task.CompletedTask;
        return new List<ExchangeCompanyDTO>()
		{
			new ExchangeCompanyDTO {Name = "Apple"},
			new ExchangeCompanyDTO {Name = "Amazon"}
		};
    }
}
